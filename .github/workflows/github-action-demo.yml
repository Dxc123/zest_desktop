name: Github Action Flutter项目打包
#触发事件
on:
  push:
    branches:
      - master  # 指定触发构建的分支
#    tags:   #指定触发构建的某个 tag版本 如：git tag v1.0.0 , git push --tags
#      - "v*"

# 并发策略
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  # 如果有新的运行实例，取消正在进行的实例
  cancel-in-progress: true


jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 拉取并检测代码
        uses: actions/checkout@v4

      # 设置 Flutter 环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
           channel: stable
           flutter-version: 3.24.5

      - name: 解码 Keystore 文件
        run: echo "${{ secrets.KEY_STORE_BASE64 }}" | base64 -d > testhani.jks

      # 配置签名文件
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEY_STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=testhani.jks" >> android/key.properties

##      验证 Secrets 配置-打印 Secrets 检查值是否正确
#      - name: Debug Secrets
#        run: |
#          echo "KEY_STORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD }}"
#          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}"
#          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}"
#
#       # 验证文件路径-打印 Android 目录
#      - name: List Android Directory
#        run: ls android

        # 缓存依赖
      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pub-cache-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-cache-

      #更新 Flutter 依赖
      - name: Get and Upgrade Flutter dependencies
        run: |
          flutter pub get
          flutter pub upgrade

      # 构建 Release APK
      - name: Build Release APK
        run: flutter build apk --obfuscate --split-debug-info=./symbols

      # 上传生成的 APK
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: flutter-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

#      #构建 Release AAB
#      - name: Build APK and AAB
#        run: flutter build appbundle --obfuscate --split-debug-info=./obfuse
#
#      # 上传生成的 AAB
#      - name: Upload AAB
#        uses: actions/upload-artifact@v4
#        with:
#          name: flutter-release-aab
#          path: build/app/outputs/bundle/release/app-release.aab

      # 发布到 GitHub Releases
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
          tag: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: "This is an automatically generated release."
          allowUpdates: true #是否应更新已存在的版本
          makeLatest: true #指示发布是否应为“最新”发布
          draft: false #可选择将此版本标记为草稿版本
          prerelease: false #可选择将此版本标记为预发布版本
          token: ${{ secrets.AUTH_TOKEN }}

      #  # 发送邮件
      # - name: Send email
      #   uses: dawidd6/action-send-mail@v4
      #   with:
      #     # 邮箱配置，密码是SMTP服务的授权密码
      #     server_address: smtp.163.com
      #     server_port: 465
      #     username: ${{secrets.MAIL_USERNAME}}
      #     password: ${{secrets.MAIL_PASSWORD}}

      #     # 邮件内容
      #     subject: Github Actions job result
      #     from: ${{secrets.MAIL_USERNAME}}
      #     to: ${{secrets.MAIL_TOUSERNAME}}
      #     body: Build job of ${{github.repository}} completed successfully!




