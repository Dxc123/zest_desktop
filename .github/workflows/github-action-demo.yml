name: Release

# 触发条件: 这里是push以”v“开头的tag触发
on:
  push:
    # 根据branch或者tags来触发
     branches:
#      - main
      - master

#    tags:
#      - "v*"
    # 忽略的标签类型，不触发构建流程(和tags不能同时写)
    # tags-ignore:
    #   - "d*"

  # strategy:
  # 矩阵使用: ${{ matrix.os }}
  # 下面两个矩阵，会代码就会执行 2 * 3 = 6次
  # matrix:
  #  os: [ubuntu-16.04, ubuntu-18.04]
  #  node: [6, 8, 10]

# 一次持续集成的运行，可以完成多个任务(下面就build)
jobs:
  builds:
    # 构建的系统(ubuntu(虚拟机)、windows、macos)
    runs-on: ubuntu-latest

    # 可以依赖其他job
    # needs: xxxJob、[job1, job2]

    # 构建权限，ncipollo/release-action需要使用
    permissions:
      contents: write

    # 操作步骤(按顺序执行)
    steps:

      # 拉取仓库代码
      - uses: actions/checkout@v3

      # 设置Java运行环境JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      # 生成keystore签名文件
      # 一些不允许公开的信息（比如：远端服务器的Key、jks文件的密码）
      #  可以预先维护在Github > settings > Secrets and variables > Actions > * secrets 中，就可以通过 ${{ secrets.* }} 获取。
      - name: Create Keystore Properties
        run: |
            echo "storePassword=${{ secrets.KEY_STORE_PASSWORD }}" > key.properties
            echo "keyPassword=${{ secrets.KEY_PASSWORD}}" >> key.properties
            echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> key.properties
            echo "storeFile=../testhani.jks" >> key.properties
            ls -laq
            cat key.properties
          working-directory: android

      # base64解码
      - name: Decode Keystore
        run: echo ${{ secrets.SIGNING_KEY }} | base64 --decode > android/app/testhani.jks

     # 打印当前目录
      - name: Ls Android Directory
        run: ls -laq
        working-directory: android
      # 设置gradle环境(比如: 6.5)、打包命令
      - uses: gradle/gradle-build-action@v2
        with:
          gradle-version: current
          arguments: assembleRelease
      # Flutter安装
      - name: Install Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.22.0' # 3.27.1
       # 获取依赖
      - name: Get dependencies
        run: flutter pub get
       # 打包APK
      - name: Build APK
        run: flutter build apk --obfuscate --split-debug-info=./symbols
      # 打包APK存放的路径
      - name: Ls output directory
        run: ls -laq build/app/outputs/flutter-apk/
       #  创建Release信息
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN}}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref, '-alpha') || contains(github.ref, '-beta') }}
          body: ${{ github.event.head_commit.message }}
      # 上传Release Asset
      - name: Upload arm64-v8a Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
          asset_name: app-arm64-v8a-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload armeabi-v7a Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          asset_name: app-armeabi-v7a-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload x86_64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-x86_64-release.apk
          asset_name: app-x86_64-release.apk
          asset_content_type: application/vnd.android.package-archive




  # 增加个notice的job，在打包完成后发邮件通知
  notice:
    runs-on: ubuntu-latest

    # 依赖于build
    needs: builds

    # 操作步骤
    steps:
      - name: Send email
        uses: dawidd6/action-send-mail@v3
        with:
          # 邮箱配置，密码是SMTP服务的授权密码
          server_address: smtp.163.com
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}

          # 邮件内容
          subject: Github Actions job result
          from: ${{secrets.MAIL_USERNAME}}
          to: ${{secrets.MAIL_TOUSERNAME}}
          body: Build job of ${{github.repository}} completed successfully!